# -*- coding: utf-8 -*-
"""GenerateGWsignals

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aaVNthZ01DhU6HgwyK_QQurZh1BmbMfW
"""

import numpy as np
from pycbc.psd.analytical import aLIGOZeroDetHighPower
from pycbc.psd import inverse_spectrum_truncation
from pycbc.conversions import mchirp_from_mass1_mass2, eta_from_mass1_mass2, mass1_from_mchirp_eta, mass2_from_mchirp_eta
from pycbc.waveform.utils import taper_timeseries
from pycbc.waveform import get_td_waveform
from pycbc.waveform.utils import frequency_from_polarizations

'''
 Advanced LIGO Power Spectral Density
'''
def getPSD(fLow, df, N):
    psd = aLIGOZeroDetHighPower(int(N/2) + 1, df, fLow)
    psd = inverse_spectrum_truncation(psd,
                                      max_filter_len=512,
                                      low_frequency_cutoff=fLow,
                                      trunc_method='hann')
    
    return psd

'''
Whiten the time series with the given PSD
'''
def whiten(strain, psd, dt):
    Nt = len(strain)
    freqs = np.fft.rfftfreq(Nt, dt)
    # whitening: transform to freq domain, divide by asd, then transform back, 
    # taking care to get normalization right.
    hf = np.fft.rfft(strain)
    white_hf = hf / (np.sqrt(psd /dt/2.))
    white_ht = np.fft.irfft(white_hf, n=Nt)
    return white_ht

'''
Generate whitened GW time series
'''

def gwtimeseries(waveModel, m1,m2,s1,s2,flow,dist,fSamp,tbuffer):
  hp, hc = get_td_waveform(approximant=waveModel,
                         mass1=m1,
                         mass2=m2,
                         delta_t=1.0/fSamp,
                         f_lower=flow,
                         distance=dist)
  tSamples = np.arange(0, len(hp)) / fSamp
  hptaper = taper_timeseries(hp, tapermethod='startend', return_lal=False)
  hctaper = taper_timeseries(hc, tapermethod='startend', return_lal=False)
  psd = getPSD(30, 1./tbuffer, len(tSamples))
  w_sp = whiten(hptaper, psd, 1.0/fSamp)
  w_sc = whiten(hctaper, psd, 1.0/fSamp) 

  return hp,hc, w_sp,w_sc,tSamples

'''
Generate f(t) from the 2 polarizations
'''
def getf(hp,hc):
  ft = frequency_from_polarizations(hp,hc)

  return ft